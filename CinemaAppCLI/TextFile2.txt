using Microsoft.EntityFrameworkCore;
using CinemaApp.Db;
using CinemaApp.Controllers;
using CinemaApp.Models.Dtos;
using CinemaApp.Models;
using Microsoft.AspNetCore.Mvc;
using Spectre.Console;
using System.Runtime.InteropServices;
using Microsoft.Identity.Client;
using Microsoft.AspNetCore.Http;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Identity;
using Newtonsoft.Json.Linq;

class Program
{
        // Importowanie funkcji do maksymalizacji okna konsoli
        [DllImport("user32.dll")]
        private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

        [DllImport("kernel32.dll")]
        private static extern IntPtr GetConsoleWindow();

    private const int SW_MAXIMIZE = 3;

    static async Task Main(string[] args)
    {
        IntPtr handle = GetConsoleWindow();
        ShowWindow(handle, SW_MAXIMIZE);

        // Wyświetlenie animacji ASCII
        DisplayAsciiArt("ascii-art.txt");

        // Wyczekanie na naciśnięcie dowolnego klawisza
        AnsiConsole.MarkupLine("[bold yellow]Naciśnij dowolny klawisz, aby przejść do menu...[/]");
        Console.ReadKey();

        // Tworzenie opcji dla ApplicationContext
        var optionsBuilder = new DbContextOptionsBuilder<ApplicationContext>();
        optionsBuilder.UseSqlServer("Server=(localdb)\\mssqllocaldb;Database=CinemaApp;Trusted_Connection=True;MultipleActiveResultSets=true");
        var context = new ApplicationContext(optionsBuilder.Options);
        User user = new User{ Role=" "};
        bool exit = false;
        while (!exit)
        {
            string[] menuChoices;
            ShowHeader();
            if (user.Role == "admin") {
                //menuChoices = new string[]{ "1. Show Movies", "2. Add Movie", "3. Edit Movie", "4. Delete Movie",
                //    "5. Show tickets","6. Logout","9. Show Sessions", "10. Add Session", "11. Edit Session", "12. Delete Session",
                //    "13A. Show Cinemas", "14. Add Cinema", "15. Edit Cinema", "16. Delete Cinema",
                //    "17. Show Halls", "18. Add Hall", "19. Edit Hall", "20. Delete Hall",
                //    "21. Login User", "22. Show Users", "23. Add User", "24. Edit User", "25. Delete User", "26. Exit"};
                //}

            menuChoices = new string[]
       {
            // Movies
            "1. Show Movies",
            "2. Add Movie",
            "3. Edit Movie",
            "4. Delete Movie",

            // Sessions
            "5. Show Sessions",
            "6. Add Session",
            "7. Edit Session",
            "8. Delete Session",

            // Tickets
            "9. Show Tickets",
            "10. Show User Tickets",

            // Cinemas
            "11. Show Cinemas",
            "12. Add Cinema",
            "13. Edit Cinema",
            "14. Delete Cinema",

            // Halls
            "15. Show Halls",
            "16. Add Hall",
            "17. Edit Hall",
            "18. Delete Hall",

            // Users
            "19. Show Users",
            "20. Add User",
            "21. Edit User",
            "22. Delete User",

            // Other
            "23. Login User",
            "24. Logout",
            "25. Exit"
       };
        }

            else if (user.Role == "user") {
                    menuChoices = new string[] {
                        "1. Show Movies",
                        "2. Show User Tickets",
                        "3. Book Ticket",
                        "4. Edit Ticket",
                        "5. Delete Ticket",
                        "6. Show Sessions",
                        "7. Show Cinemas",
                        "8. Logout",
                        "9. Exit"
                    };
                }
            ///jak sie zle zaloguje to wywala program
            else if (user.Role == "null")
            {
                menuChoices = new string[] {
                        "1. Show Movies",
                        "2. Show Sessions",
                        "3. Login User",
                        "4. Add user",
                        "5. Show Cinemas",
                        "6. Exit",
                    };
            }

            else
            {
              menuChoices = new string[] {
                        "1. Show Movies",
                        "2. Show Sessions",
                        "3. Show Cinemas",
                        "4. Login User",
                        "5. Add User",
                        "6. Exit"
                    };
            }

            var choice = AnsiConsole.Prompt(
                new SelectionPrompt<string>()
                    .Title("[bold yellow]Wybierz opcję z menu poniżej:[/]")
                    .PageSize(15)
                    .AddChoices(menuChoices));

            Console.Clear();
            ShowHeader();

            switch (choice)
            {
              //  case "1. Show Movies": await ShowMovies(context);break;
                //case "2. Add Movie": await AddMovie(context); break;
                //case "3. Edit Movie": await EditMovie(context);break;
                //case "4. Delete Movie": await DeleteMovie(context);break;
                //case "5. Show tickets": await ShowUserTickets(context,user); break;
                //case "9. Show Sessions": await ShowSessions(context); break;
                //case "10. Add Session": await AddSession(context); break;
                //case "11. Edit Session": await EditSession(context); break;
                //case "12. Delete Session": await DeleteSession(context); break;
                case "13. Show Cinemas": await ShowCinemas(context); break;
                //case "14. Add Cinema": await AddCinema(context); break;
                //case "15. Edit Cinema": await EditCinema(context); break;
                //case "16. Delete Cinema": await DeleteCinema(context); break;
                //case "17. Show Halls": await ShowHalls(context); break;
                //case "18. Add Hall": await AddHall(context); break;
                //case "19. Edit Hall": await EditHall(context); break;
                //case "20. Delete Hall": await DeleteHall(context); break;
                //case  "22. Show Users": await ShowUsers(context); break;
                //case "23. Add User": await AddUser(context); break;
                //case "24. Edit User": await EditUser(context); break;
                //case "25. Delete User": await DeleteUser(context); break;
                case "26. Exit": exit = true; break;
                case "2. Show User Tickets": await ShowUserTickets(context, user); break;
                case "3. Book Ticket": await BookTicket(context, user); break;
                case "4. Show Sessions": await ShowSessions(context); break;
                case "5. Exit": exit = true; break;
              //  case "2. Show Sessions": await ShowSessions(context); break;
                //case "3. Login User": user = await LoginUser(context); break;
                case "4. Add user": await AddUser(context); break;
                case "6. Logout": user = new User { Role = " " }; break;
                case "7. Edit Ticket": await EditTicket(context, user); break;
                case "8. Delete Ticket": await DeleteTicket(context, user); break;
                case "13A. Show Cinemas": await ShowCinemasAdmin(context); break;
               // case "6. Exit": exit = true; break;
                case "5. Show Cinemas": await ShowCinemasAdmin(context); break;
            //    case "4. Login User": user = await LoginUser(context); break;

                //niezalogowany
                case "1. Show Movies": await ShowMovies(context); break;
                case "2. Show Sessions": await ShowSessions(context); break;
                case "3. Show Cinemas": await ShowCinemas(context); break;
                case "4. Login User": user = await LoginUser(context); break;
                case "5. Add user": await AddUser(context); break;
                case "6. Exit": exit = true; break;

                //user
              
                //case "1. Show Movies": await ShowMovies(context); break;
                //case "2. Show User Tickets": await ShowUserTickets(context, user); break;
                //case "3. Book Ticket": await BookTicket(context, user); break;
                case "4. Edit Ticket": await EditTicket(context, user); break;
                case "5. Delete Ticket": await DeleteTicket(context, user); break;
                case "6. Show Sessions": await ShowSessions(context); break;
                case "7. Show Cinemas": await ShowCinemas(context); break;
                case "8. Logout": user = new User { Role = " " }; break;
                case "9. Exit": exit = true; break;


                //admin
                //case "1. Show Movies": await ShowMovies(context); break;
                case "2. Add Movie": await AddMovie(context); break;
                case "3. Edit Movie": await EditMovie(context); break;
                case "4. Delete Movie": await DeleteMovie(context); break;
                case "5. Show Sessions": await ShowSessions(context); break;
                case "6. Add Session": await AddSession(context); break;
                case "7. Edit Session": await EditSession(context); break;
                case "8. Delete Session": await DeleteSession(context); break;
                case "9. Show tickets": await ShowUserTickets(context, user); break;
                case "10. Show User Tickets": await ShowUserTickets(context, user); break;
                case "11. Show Cinemas": await ShowCinemasAdmin(context); break;
                case "12. Add Cinema": await AddCinema(context); break;
                case "13. Edit Cinema": await EditCinema(context); break;
                case "14. Delete Cinema": await DeleteCinema(context); break;
                case "15. Show Halls": await ShowHalls(context); break;
                case "16. Add Hall": await AddHall(context); break;
                case "17. Edit Hall": await EditHall(context); break;
                case "18. Delete Hall": await DeleteHall(context); break;
                case "19. Show Users": await ShowUsers(context); break;
                case "20. Add User": await AddUser(context); break;
                case "21. Edit User": await EditUser(context); break;
                case "22. Delete User": await DeleteUser(context); break;
                case "23. Login User": user = await LoginUser(context); break;
                case "24. Logout": user = new User { Role = " " }; break;
                case "25. Exit": exit = true; break;




            }

            if (!exit)
            {
                AnsiConsole.Markup("[bold green]\nNaciśnij dowolny klawisz, aby wrócić do menu...[/]");
                Console.ReadKey();
                Console.Clear();
            }
        }
    }

    static void DisplayAsciiArt(string path)
    {
        try
        {
            string asciiArt = File.ReadAllText(path);
            AnsiConsole.Write(new Panel(asciiArt).Border(BoxBorder.Double).BorderStyle(Style.Parse("cyan")).Header("[bold yellow]Witamy![/]"));
            Thread.Sleep(2000);
        }
        catch (Exception ex)
        {
            AnsiConsole.MarkupLine("[red]Błąd podczas odczytu pliku ASCII: [/]" + ex.Message);
        }
    }

    static void ShowHeader()
    {
        AnsiConsole.Write(
            new FigletText("CinemaApp")
                .Centered()
                .Color(Color.Aqua));
        AnsiConsole.Markup("[bold yellow]Wybierz opcję z menu poniżej:[/]\n");
        AnsiConsole.Write(new Rule("[yellow]Menu[/]").RuleStyle("green"));
    }

    //movie
    static async Task ShowMovies(ApplicationContext context)
    {
        var movieController = new MovieController(context);
        var movies = await movieController.GetMoviesAsync();

        var table = new Table().Border(TableBorder.Rounded);
        table.AddColumn("[u]Title[/]");
        table.AddColumn("[u]Genre[/]");
        table.AddColumn("[u]Director[/]");
        table.AddColumn("[u]Duration[/]");

        foreach (var movie in movies)
        {
            table.AddRow(movie.Title, movie.Genre, movie.Director, movie.Duration.ToString());
        }

        AnsiConsole.Write(table);
    }

    static async Task AddMovie(ApplicationContext context)
    {
        string title = AnsiConsole.Ask<string>("[green]Podaj tytuł:[/]");
        string description = AnsiConsole.Ask<string>("[green]Podaj opis:[/]");
        string genre = AnsiConsole.Ask<string>("[green]Podaj gatunek:[/]");
        string director = AnsiConsole.Ask<string>("[green]Podaj reżysera:[/]");
        TimeOnly duration = AnsiConsole.Ask<TimeOnly>("[green]Podaj czas trwania (HH:MM):[/]");

        var movieDto = new movieDto
        {
            Title = title,
            Description = description,
            Genre = genre,
            Director = director,
            Duration = duration
        };

        var movieController = new MovieController(context);
        await movieController.CreateMovieAsync(movieDto);
        AnsiConsole.MarkupLine("[bold green]Film został pomyślnie dodany![/]");
    }

    static async Task EditMovie(ApplicationContext context)
    {
        var movieController = new MovieController(context);
        var movies = await movieController.GetMoviesAsync();

        if (movies.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]Brak dostępnych filmów do edycji.[/]");
            return;
        }

        // Wyświetlenie listy filmów z ich ID
        var table = new Table().Border(TableBorder.Rounded);
        table.AddColumn("[u]ID[/]");
        table.AddColumn("[u]Title[/]");
        table.AddColumn("[u]Genre[/]");
        table.AddColumn("[u]Director[/]");

        foreach (var movie in movies)
        {
            table.AddRow(movie.Id.ToString(), movie.Title, movie.Genre, movie.Director);
        }

        AnsiConsole.Write(table);

        // Pobranie ID filmu do edycji
        var movieId = AnsiConsole.Prompt(
            new SelectionPrompt<Guid>()
                .Title("[green]Wybierz ID filmu do edycji:[/]")
                .AddChoices(movies.Select(m => m.Id))
        );

        // Pobranie nowych danych filmu od użytkownika
        string title = AnsiConsole.Ask<string>("[green]Podaj nowy tytuł:[/]");
        string description = AnsiConsole.Ask<string>("[green]Podaj nowy opis:[/]");
        string genre = AnsiConsole.Ask<string>("[green]Podaj nowy gatunek:[/]");
        string director = AnsiConsole.Ask<string>("[green]Podaj nowego reżysera:[/]");
        TimeOnly duration = AnsiConsole.Ask<TimeOnly>("[green]Podaj nowy czas trwania (HH:MM):[/]");

        // Utworzenie obiektu DTO z nowymi danymi
        var movieDto = new movieDto
        {
            Id = movieId,
            Title = title,
            Description = description,
            Genre = genre,
            Director = director,
            Duration = duration
        };

        // Aktualizacja filmu
        await movieController.UpdateMovieAsync(movieDto);
        AnsiConsole.MarkupLine("[bold green]Film został pomyślnie zaktualizowany![/]");
    }

    static async Task DeleteMovie(ApplicationContext context)
    {
        var movieController = new MovieController(context);
        var movies = await movieController.GetMoviesAsync();

        if (movies.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]Brak dostępnych filmów do usunięcia.[/]");
            return;
        }

        // Wyświetlenie listy filmów z ich ID
        var table = new Table().Border(TableBorder.Rounded);
        table.AddColumn("[u]ID[/]");
        table.AddColumn("[u]Title[/]");
        table.AddColumn("[u]Genre[/]");
        table.AddColumn("[u]Director[/]");

        foreach (var movie in movies)
        {
            table.AddRow(movie.Id.ToString(), movie.Title, movie.Genre, movie.Director);
        }

        AnsiConsole.Write(table);

        // Pobranie ID filmu do usunięcia
        var movieId = AnsiConsole.Prompt(
            new SelectionPrompt<Guid>()
                .Title("[green]Wybierz ID filmu do usunięcia:[/]")
                .AddChoices(movies.Select(m => m.Id))
        );

        // Usunięcie filmu
        await movieController.DeleteMovieByIdAsync(movieId);
        AnsiConsole.MarkupLine("[bold red]Film został pomyślnie usunięty![/]");
    }
    //tickets

    static async Task ShowUserTickets(ApplicationContext context, User user)
    {
        if (user.Role == "admin")
        {
            var userController = new UserController(context);
            var users = await userController.GetUserAsync();

            if (users == null || users.Count == 0)
            {
                AnsiConsole.MarkupLine("[red]Brak dostępnych użytkowników.[/]");
                return;
            }

            // Wyświetlenie tabeli z użytkownikami
            var userTable = new Table().Border(TableBorder.Rounded);
            userTable.AddColumn("[u]ID[/]");
            userTable.AddColumn("[u]Imię[/]");
            userTable.AddColumn("[u]Nazwisko[/]");
            userTable.AddColumn("[u]Email[/]");

            foreach (var user1 in users)
            {
                userTable.AddRow(user1.Id.ToString(), user1.Name, user1.LastName, user1.Email);
            }

            AnsiConsole.Write(userTable);

            // Wybór użytkownika na podstawie ID
            var userId = AnsiConsole.Prompt(
                new SelectionPrompt<Guid>()
                    .Title("[green]Wybierz ID użytkownika, aby wyświetlić bilety:[/]")
                    .AddChoices(users.Select(u => u.Id))
            );

            var ticketController = new TicketController(context);
            var tickets = await ticketController.GetTicketsByUserIdAsync(userId);

            if (tickets == null || tickets.Count == 0)
            {
                AnsiConsole.MarkupLine("[red]Brak dostępnych biletów dla tego użytkownika.[/]");
                return;
            }

            // Wyświetlenie tabeli z biletami
            var ticketTable = new Table().Border(TableBorder.Rounded);
            ticketTable.AddColumn("[u]ID[/]");
            ticketTable.AddColumn("[u]Seat[/]");
            ticketTable.AddColumn("[u]Status[/]");
            ticketTable.AddColumn("[u]Price[/]");

            foreach (var ticket in tickets)
            {
                ticketTable.AddRow(ticket.Id.ToString(), ticket.Seat, ticket.Status, ticket.Price.ToString("C"));
            }

            AnsiConsole.Write(ticketTable);
        }
        else if (user.Role == "user")
        {
            var ticketController = new TicketController(context);
            var tickets = await ticketController.GetTicketsByUserIdAsync(user.Id);

            if (tickets == null || tickets.Count == 0)
            {
                AnsiConsole.MarkupLine("[red]Brak dostępnych biletów dla tego użytkownika.[/]");
                return;
            }

            var sessionIds = tickets.Select(t => t.SessionId).Distinct();
            var sessions = await context.Sessions
                .Include(s => s.Movie)
                .Include(s => s.Hall)
                .Where(s => sessionIds.Contains(s.Id))
                .ToListAsync();

            var ticketTable = new Table().Border(TableBorder.Rounded);
            ticketTable.AddColumn("[u]Movie[/]");
            ticketTable.AddColumn("[u]Hall[/]");
            ticketTable.AddColumn("[u]Date and time[/]");
            ticketTable.AddColumn("[u]Seat[/]");
            ticketTable.AddColumn("[u]Status[/]");
            ticketTable.AddColumn("[u]Price[/]");

            foreach (var ticket in tickets)
            {
                var session = sessions.FirstOrDefault(s => s.Id == ticket.SessionId);
                if (session != null)
                {
                    ticketTable.AddRow(
                        session.Movie.Title,
                        session.Hall.Number.ToString(),
                        session.Date.ToString("yyyy-MM-dd HH:mm"),
                        ticket.Seat.ToString(),
                        ticket.Status,
                        ticket.Price.ToString("C")
                    );
                }
            }

            AnsiConsole.Write(ticketTable);
        }
    }

    //static async Task BookTicket(ApplicationContext context)
    //{
    //    // Pobranie listy użytkowników
    //    var userController = new UserController(context);
    //    var users = await userController.GetUserAsync();

    //    if (users == null || users.Count == 0)
    //    {
    //        AnsiConsole.MarkupLine("[red]Brak dostępnych użytkowników.[/]");
    //        return;
    //    }

    //    // Wyświetlenie tabeli z użytkownikami
    //    var userTable = new Table().Border(TableBorder.Rounded);
    //    userTable.AddColumn("[u]ID[/]");
    //    userTable.AddColumn("[u]Imię[/]");
    //    userTable.AddColumn("[u]Nazwisko[/]");
    //    userTable.AddColumn("[u]Email[/]");

    //    foreach (var user in users)
    //    {
    //        userTable.AddRow(user.Id.ToString(), user.Name, user.LastName, user.Email);
    //    }

    //    AnsiConsole.Write(userTable);

    //    // Wybór użytkownika na podstawie ID
    //    var userId = AnsiConsole.Prompt(
    //        new SelectionPrompt<Guid>()
    //            .Title("[green]Wybierz ID użytkownika, aby dodać bilet:[/]")
    //            .AddChoices(users.Select(u => u.Id))
    //    );

    //    // Pobranie listy sesji
    //    var sessionController = new SessionController(context);
    //    var sessions = await sessionController.GetSessionAsync();

    //    if (sessions == null || sessions.Count == 0)
    //    {
    //        AnsiConsole.MarkupLine("[red]Brak dostępnych sesji.[/]");
    //        return;
    //    }

    //    // Wyświetlenie tabeli z sesjami
    //    var sessionTable = new Table().Border(TableBorder.Rounded);
    //    sessionTable.AddColumn("[u]ID[/]");
    //    sessionTable.AddColumn("[u]Film ID[/]");
    //    sessionTable.AddColumn("[u]Data[/]");
    //    sessionTable.AddColumn("[u]Cena biletu[/]");
    //    sessionTable.AddColumn("[u]Dostępne miejsca[/]");

    //    foreach (var session in sessions)
    //    {
    //        sessionTable.AddRow(session.Id.ToString(), session.MovieId.ToString(), session.Date.ToString("yyyy-MM-dd HH:mm"), session.TicketPrice.ToString("C"), session.AvailibleSeats.ToString());
    //    }

    //    AnsiConsole.Write(sessionTable);

    //    // Wybór sesji na podstawie ID
    //    var sessionId = AnsiConsole.Prompt(
    //        new SelectionPrompt<Guid>()
    //            .Title("[green]Wybierz ID sesji, aby zarezerwować bilet:[/]")
    //            .AddChoices(sessions.Select(s => s.Id))
    //    );

    //    Console.Write("Wprowadź ilość miejsc: ");
    //    if (!int.TryParse(Console.ReadLine(), out int numberOfSeats) || numberOfSeats <= 0)
    //    {
    //        AnsiConsole.MarkupLine("[red]Niepoprawna ilość miejsc. Spróbuj ponownie.[/]");
    //        return;
    //    }

    //    // Zmiana nazwy zmiennej na `selectedSession` dla uniknięcia konfliktu
    //    var selectedSession = sessions.FirstOrDefault(s => s.Id == sessionId);

    //    if (selectedSession == null || selectedSession.AvailibleSeats < numberOfSeats)
    //    {
    //        AnsiConsole.MarkupLine("[red]Niewystarczająca ilość dostępnych miejsc.[/]");
    //        return;
    //    }

    //    // Utworzenie obiektu biletu
    //    var ticketDto = new ticketDto
    //    {
    //        SessionId = sessionId,
    //        NumberOfSeats = numberOfSeats,
    //        Seat = "A1", // Przykładowe miejsce, tutaj można wprowadzić logikę wyboru miejsca
    //        Status = "Reserved",
    //        Price = selectedSession.TicketPrice * numberOfSeats,
    //        UserId = userId // Przypisanie wybranego ID użytkownika
    //    };

    //    var ticketController = new TicketController(context);
    //    await ticketController.CreateTicketAsync(ticketDto);
    //    AnsiConsole.MarkupLine("[bold green]Bilet został pomyślnie zarezerwowany dla wybranego użytkownika![/]");
    //}
    /// <summary>
    /// /zx
    /// </summary>
    /// <param name="context"></param>
    /// <param name="loggedInUser"></param>
    /// <returns></returns>
    //static async Task BookTicket(ApplicationContext context, User loggedInUser)
    //{
    //    if (string.IsNullOrEmpty(loggedInUser?.Role) || loggedInUser.Role != "user")
    //    {
    //        AnsiConsole.MarkupLine("[red]Tylko zalogowani użytkownicy mogą rezerwować bilety.[/]");
    //        return;
    //    }

    //    // Pobranie listy sesji
    //    var sessionController = new SessionController(context);
    //    var sessions = await sessionController.GetSessionAsync();

    //    if (sessions == null || sessions.Count == 0)
    //    {
    //        AnsiConsole.MarkupLine("[red]Brak dostępnych sesji.[/]");
    //        return;
    //    }

    //    // Wyświetlenie tabeli z sesjami wraz z nazwami filmów
    //    var sessionTable = new Table().Border(TableBorder.Rounded);
    //    sessionTable.AddColumn("[u]ID[/]");
    //    sessionTable.AddColumn("[u]Film[/]");
    //    sessionTable.AddColumn("[u]Data[/]");
    //    sessionTable.AddColumn("[u]Cena biletu[/]");
    //    sessionTable.AddColumn("[u]Dostępne miejsca[/]");

    //    foreach (var session in sessions)
    //    {
    //        // Pobranie nazwy filmu na podstawie ID filmu w sesji
    //        var movie = await context.Movies.FindAsync(session.MovieId);
    //        var movieTitle = movie?.Title ?? "[red]Nieznany film[/]";

    //        sessionTable.AddRow(session.Id.ToString(), movieTitle, session.Date.ToString("yyyy-MM-dd HH:mm"), session.TicketPrice.ToString("C"), session.AvailibleSeats.ToString());
    //    }

    //    AnsiConsole.Write(sessionTable);

    //    // Wybór sesji na podstawie ID
    //    var selectedSessionId = AnsiConsole.Prompt(
    //        new SelectionPrompt<Guid>()
    //            .Title("[green]Wybierz ID sesji, aby zarezerwować bilet:[/]")
    //            .AddChoices(sessions.Select(s => s.Id))
    //    );

    //    // Wprowadzenie ilości miejsc
    //    var numberOfSeats = AnsiConsole.Ask<int>("[green]Wprowadź ilość miejsc:[/]");

    //    // Znalezienie wybranej sesji
    //    var selectedSession = sessions.FirstOrDefault(s => s.Id == selectedSessionId);

    //    if (selectedSession == null || selectedSession.AvailibleSeats < numberOfSeats)
    //    {
    //        AnsiConsole.MarkupLine("[red]Niewystarczająca ilość dostępnych miejsc.[/]");
    //        return;
    //    }

    //    // Utworzenie obiektu biletu
    //    var ticketDto = new ticketDto
    //    {
    //        SessionId = selectedSession.Id,
    //        NumberOfSeats = numberOfSeats,
    //        Seat = "A1", // Przykładowe miejsce, tutaj można wprowadzić logikę wyboru miejsca
    //        Status = "Reserved",
    //        Price = selectedSession.TicketPrice * numberOfSeats,
    //        UserId = loggedInUser.Id // Użycie ID zalogowanego użytkownika
    //    };

    //    var ticketController = new TicketController(context);
    //    await ticketController.CreateTicketAsync(ticketDto);
    //    AnsiConsole.MarkupLine("[bold green]Bilet został pomyślnie zarezerwowany dla zalogowanego użytkownika![/]");
    //}

    //static async Task BookTicket(ApplicationContext context, User loggedInUser)
    //{
    //    if (string.IsNullOrEmpty(loggedInUser?.Role) || loggedInUser.Role != "user")
    //    {
    //        AnsiConsole.MarkupLine("[red]Tylko zalogowani użytkownicy mogą rezerwować bilety.[/]");
    //        return;
    //    }

    //    // Pobranie listy sesji z informacjami o filmach
    //    var sessionController = new SessionController(context);
    //    var sessions = await sessionController.GetSessionAsync();

    //    if (sessions == null || sessions.Count == 0)
    //    {
    //        AnsiConsole.MarkupLine("[red]Brak dostępnych sesji.[/]");
    //        return;
    //    }

    //    // Wyświetlenie dostępnych filmów z sesjami
    //    var moviesWithSessions = sessions
    //        .Select(s => new { Session = s, Movie = context.Movies.Find(s.MovieId) })
    //        .Where(m => m.Movie != null)
    //        .ToList();

    //    var movieTable = new Table().Border(TableBorder.Rounded);
    //    movieTable.AddColumn("[u]Tytuł Filmu[/]");
    //    movieTable.AddColumn("[u]Data Sesji[/]");
    //    movieTable.AddColumn("[u]Cena biletu[/]");
    //    movieTable.AddColumn("[u]Dostępne miejsca[/]");

    //    foreach (var item in moviesWithSessions)
    //    {
    //        movieTable.AddRow(
    //            item.Movie.Title,
    //            item.Session.Date.ToString("yyyy-MM-dd HH:mm"),
    //            item.Session.TicketPrice.ToString("C"),
    //            item.Session.AvailibleSeats.ToString()
    //        );
    //    }

    //    AnsiConsole.Write(movieTable);

    //    // Wybór filmu po nazwie
    //    var selectedMovieTitle = AnsiConsole.Prompt(
    //        new SelectionPrompt<string>()
    //            .Title("[green]Wybierz film, aby zarezerwować bilet:[/]")
    //            .AddChoices(moviesWithSessions.Select(m => m.Movie.Title).Distinct())
    //    );

    //    // Pobranie dostępnych sesji dla wybranego filmu
    //    var availableSessions = moviesWithSessions
    //        .Where(m => m.Movie.Title == selectedMovieTitle)
    //        .Select(m => m.Session)
    //        .ToList();

    //    if (!availableSessions.Any())
    //    {
    //        AnsiConsole.MarkupLine("[red]Brak dostępnych sesji dla wybranego filmu.[/]");
    //        return;
    //    }

    //    // Wybór daty sesji dla wybranego filmu
    //    var selectedSessionDate = AnsiConsole.Prompt(
    //        new SelectionPrompt<DateTime>()
    //            .Title("[green]Wybierz datę sesji:[/]")
    //            .AddChoices(availableSessions.Select(s => s.Date))
    //    );

    //    // Znalezienie wybranej sesji na podstawie wybranej daty
    //    var selectedSession = availableSessions.First(s => s.Date == selectedSessionDate);

    //    // Wprowadzenie liczby miejsc
    //    var numberOfSeats = AnsiConsole.Ask<int>("[green]Wprowadź ilość miejsc:[/]");

    //    if (selectedSession.AvailibleSeats < numberOfSeats)
    //    {
    //        AnsiConsole.MarkupLine("[red]Niewystarczająca ilość dostępnych miejsc.[/]");
    //        return;
    //    }

    //    // Wybór konkretnego miejsca (można rozszerzyć o logikę sprawdzenia dostępności miejsc)
    //    var seat = AnsiConsole.Ask<string>("[green]Podaj miejsce (np. A1):[/]");

    //    // Opcjonalny wybór statusu biletu
    //    var status = AnsiConsole.Prompt(
    //        new SelectionPrompt<string>()
    //            .Title("[green]Wybierz status biletu:[/]")
    //            .AddChoices(new[] { "Reserved", "Paid", "Cancelled" })
    //    );

    //    // Utworzenie biletu
    //    var ticketDto = new ticketDto
    //    {
    //        SessionId = selectedSession.Id,
    //        NumberOfSeats = numberOfSeats,
    //        Seat = seat,
    //        Status = status,
    //        Price = selectedSession.TicketPrice * numberOfSeats,
    //        UserId = loggedInUser.Id // Przypisanie ID zalogowanego użytkownika
    //    };

    //    var ticketController = new TicketController(context);
    //    await ticketController.CreateTicketAsync(ticketDto);
    //    AnsiConsole.MarkupLine("[bold green]Bilet został pomyślnie zarezerwowany dla zalogowanego użytkownika![/]");
    //}

    //static async Task BookTicket(ApplicationContext context, User loggedInUser)
    //{
    //    if (string.IsNullOrEmpty(loggedInUser?.Role) || loggedInUser.Role != "user")
    //    {
    //        AnsiConsole.MarkupLine("[red]Tylko zalogowani użytkownicy mogą rezerwować bilety.[/]");
    //        return;
    //    }

    //    // Pobranie listy sesji z informacjami o filmach
    //    var sessionController = new SessionController(context);
    //    var sessions = await sessionController.GetSessionAsync();

    //    if (sessions == null || sessions.Count == 0)
    //    {
    //        AnsiConsole.MarkupLine("[red]Brak dostępnych sesji.[/]");
    //        return;
    //    }

    //    // Wyświetlenie dostępnych filmów z sesjami
    //    var moviesWithSessions = sessions
    //        .Select(s => new { Session = s, Movie = context.Movies.Find(s.MovieId) })
    //        .Where(m => m.Movie != null)
    //        .ToList();

    //    var movieTable = new Table().Border(TableBorder.Rounded);
    //    movieTable.AddColumn("[u]Tytuł Filmu[/]");
    //    movieTable.AddColumn("[u]Data Sesji[/]");
    //    movieTable.AddColumn("[u]Cena biletu[/]");
    //    movieTable.AddColumn("[u]Dostępne miejsca[/]");

    //    foreach (var item in moviesWithSessions)
    //    {
    //        movieTable.AddRow(
    //            item.Movie.Title,
    //            item.Session.Date.ToString("yyyy-MM-dd HH:mm"),
    //            item.Session.TicketPrice.ToString("C"),
    //            item.Session.AvailibleSeats.ToString()
    //        );
    //    }

    //    AnsiConsole.Write(movieTable);

    //    // Wybór filmu po nazwie
    //    var selectedMovieTitle = AnsiConsole.Prompt(
    //        new SelectionPrompt<string>()
    //            .Title("[green]Wybierz film, aby zarezerwować bilet:[/]")
    //            .AddChoices(moviesWithSessions.Select(m => m.Movie.Title).Distinct())
    //    );

    //    // Pobranie dostępnych sesji dla wybranego filmu
    //    var availableSessions = moviesWithSessions
    //        .Where(m => m.Movie.Title == selectedMovieTitle)
    //        .Select(m => m.Session)
    //        .ToList();

    //    if (!availableSessions.Any())
    //    {
    //        AnsiConsole.MarkupLine("[red]Brak dostępnych sesji dla wybranego filmu.[/]");
    //        return;
    //    }

    //    // Wybór daty sesji dla wybranego filmu
    //    var selectedSessionDate = AnsiConsole.Prompt(
    //        new SelectionPrompt<DateTime>()
    //            .Title("[green]Wybierz datę sesji:[/]")
    //            .AddChoices(availableSessions.Select(s => s.Date))
    //    );

    //    // Znalezienie wybranej sesji na podstawie wybranej daty
    //    var selectedSession = availableSessions.First(s => s.Date == selectedSessionDate);

    //    // Pobranie istniejących biletów dla tej sesji w celu sprawdzenia zajętości miejsc
    //    var ticketController = new TicketController(context);
    //    var existingTickets = await ticketController.GetTicketsBySessionIdAsync(selectedSession.Id);

    //    // Wprowadzenie liczby miejsc
    //    var numberOfSeats = AnsiConsole.Ask<int>("[green]Wprowadź ilość miejsc:[/]");

    //    if (selectedSession.AvailibleSeats < numberOfSeats)
    //    {
    //        AnsiConsole.MarkupLine("[red]Niewystarczająca ilość dostępnych miejsc.[/]");
    //        return;
    //    }

    //    // Wybór konkretnego miejsca (sprawdzanie, czy miejsce jest już zajęte)
    //    string seat;
    //    do
    //    {
    //        seat = AnsiConsole.Ask<string>("[green]Podaj miejsce (np. A1):[/]");
    //        if (existingTickets.Any(t => t.Seat == seat))
    //        {
    //            AnsiConsole.MarkupLine($"[red]Miejsce {seat} jest już zajęte. Wybierz inne miejsce.[/]");
    //        }
    //    } while (existingTickets.Any(t => t.Seat == seat));

    //    // Opcjonalny wybór statusu biletu
    //    var status = AnsiConsole.Prompt(
    //        new SelectionPrompt<string>()
    //            .Title("[green]Wybierz status biletu:[/]")
    //            .AddChoices(new[] { "Reserved", "Paid", "Cancelled" })
    //    );

    //    // Utworzenie biletu
    //    var ticketDto = new ticketDto
    //    {
    //        SessionId = selectedSession.Id,
    //        NumberOfSeats = numberOfSeats,
    //        Seat = seat,
    //        Status = status,
    //        Price = selectedSession.TicketPrice * numberOfSeats,
    //        UserId = loggedInUser.Id // Przypisanie ID zalogowanego użytkownika
    //    };

    //    await ticketController.CreateTicketAsync(ticketDto);
    //    AnsiConsole.MarkupLine("[bold green]Bilet został pomyślnie zarezerwowany dla zalogowanego użytkownika![/]");
    //}

    //static async Task EditTicket(ApplicationContext context)
    //{
    //    var userController = new UserController(context);
    //    var users = await userController.GetUserAsync();

    //    if (users == null || users.Count == 0)
    //    {
    //        AnsiConsole.MarkupLine("[red]Brak dostępnych użytkowników.[/]");
    //        return;
    //    }

    //    // Wyświetlenie tabeli z użytkownikami
    //    var userTable = new Table().Border(TableBorder.Rounded);
    //    userTable.AddColumn("[u]ID[/]");
    //    userTable.AddColumn("[u]Imię[/]");
    //    userTable.AddColumn("[u]Nazwisko[/]");
    //    userTable.AddColumn("[u]Email[/]");

    //    foreach (var user in users)
    //    {
    //        userTable.AddRow(user.Id.ToString(), user.Name, user.LastName, user.Email);
    //    }

    //    AnsiConsole.Write(userTable);

    //    var userId = AnsiConsole.Ask<Guid>("[green]Podaj ID użytkownika, aby pobrać jego bilety:[/]");
    //    var ticketController = new TicketController(context);
    //    var tickets = await ticketController.GetTicketsByUserIdAsync(userId);

    //    if (tickets == null || tickets.Count == 0)
    //    {
    //        AnsiConsole.MarkupLine("[red]Brak dostępnych biletów do edycji dla tego użytkownika.[/]");
    //        return;
    //    }

    //    // Wyświetlenie tabeli z biletami
    //    var table = new Table().Border(TableBorder.Rounded);
    //    table.AddColumn("[u]ID[/]");
    //    table.AddColumn("[u]Seat[/]");
    //    table.AddColumn("[u]Status[/]");
    //    table.AddColumn("[u]Price[/]");

    //    foreach (var ticket in tickets)
    //    {
    //        table.AddRow(ticket.Id.ToString(), ticket.Seat, ticket.Status, ticket.Price.ToString("C"));
    //    }

    //    AnsiConsole.Write(table);

    //    // Pobranie ID biletu do edycji
    //    var ticketId = AnsiConsole.Prompt(
    //        new SelectionPrompt<Guid>()
    //            .Title("[green]Wybierz ID biletu do edycji:[/]")
    //            .AddChoices(tickets.Select(t => t.Id))
    //    );

    //    // Pobranie nowych danych od użytkownika
    //    string seat = AnsiConsole.Ask<string>("[green]Podaj nowe miejsce:[/]");
    //    string status = AnsiConsole.Ask<string>("[green]Podaj nowy status (np. 'Reserved', 'Cancelled'):[/]");
    //    double price = AnsiConsole.Ask<double>("[green]Podaj nową cenę biletu:[/]");
    //    int numberOfSeats = AnsiConsole.Ask<int>("[green]Podaj nową liczbę miejsc:[/]");

    //    var ticketDto = new ticketDto
    //    {
    //        Id = ticketId,
    //        Seat = seat,
    //        Status = status,
    //        Price = price,
    //        NumberOfSeats = numberOfSeats
    //    };

    //    await ticketController.UpdateTicketAsync(ticketDto);
    //    AnsiConsole.MarkupLine("[bold green]Bilet został pomyślnie zaktualizowany![/]");
    //}

    static async Task BookTicket(ApplicationContext context, User loggedInUser)
    {
        if (string.IsNullOrEmpty(loggedInUser?.Role) || loggedInUser.Role != "user")
        {
            AnsiConsole.MarkupLine("[red]Tylko zalogowani użytkownicy mogą rezerwować bilety.[/]");
            return;
        }

        // Pobranie listy sesji z informacjami o filmach
        var sessionController = new SessionController(context);
        var sessions = await sessionController.GetSessionAsync();

        if (sessions == null || sessions.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]Brak dostępnych sesji.[/]");
            return;
        }

        // Wyświetlenie dostępnych filmów z sesjami
        var moviesWithSessions = sessions
            .Select(s => new { Session = s, Movie = context.Movies.Find(s.MovieId) })
            .Where(m => m.Movie != null)
            .ToList();

        var movieTable = new Table().Border(TableBorder.Rounded);
        movieTable.AddColumn("[u]Tytuł Filmu[/]");
        movieTable.AddColumn("[u]Data Sesji[/]");
        movieTable.AddColumn("[u]Cena biletu[/]");
        movieTable.AddColumn("[u]Dostępne miejsca[/]");

        foreach (var item in moviesWithSessions)
        {
            movieTable.AddRow(
                item.Movie.Title,
                item.Session.Date.ToString("yyyy-MM-dd HH:mm"),
                item.Session.TicketPrice.ToString("C"),
                item.Session.AvailibleSeats.ToString()
            );
        }

        AnsiConsole.Write(movieTable);

        // Wybór filmu po nazwie
        var selectedMovieTitle = AnsiConsole.Prompt(
            new SelectionPrompt<string>()
                .Title("[green]Wybierz film, aby zarezerwować bilet:[/]")
                .AddChoices(moviesWithSessions.Select(m => m.Movie.Title).Distinct())
        );

        // Pobranie dostępnych sesji dla wybranego filmu
        var availableSessions = moviesWithSessions
            .Where(m => m.Movie.Title == selectedMovieTitle)
            .Select(m => m.Session)
            .ToList();

        // Wybór daty sesji dla wybranego filmu
        var selectedSessionDate = AnsiConsole.Prompt(
            new SelectionPrompt<DateTime>()
                .Title("[green]Wybierz datę sesji:[/]")
                .AddChoices(availableSessions.Select(s => s.Date))
        );

        // Znalezienie wybranej sesji na podstawie wybranej daty
        var selectedSession = availableSessions.First(s => s.Date == selectedSessionDate);

        // Lista dostępnych miejsc
        var availableSeats = GenerateSeatChoices();

        // Wybór miejsca
        var seat = AnsiConsole.Prompt(
            new SelectionPrompt<string>()
                .Title("[green]Wybierz miejsce (np. A1, B5):[/]")
                .AddChoices(availableSeats)
        );

        // Wprowadzenie liczby miejsc
        var numberOfSeats = AnsiConsole.Ask<int>("[green]Wprowadź ilość miejsc:[/]");

        if (selectedSession.AvailibleSeats < numberOfSeats)
        {
            AnsiConsole.MarkupLine("[red]Niewystarczająca ilość dostępnych miejsc.[/]");
            return;
        }

        // Utworzenie biletu
        var ticketDto = new ticketDto
        {
            SessionId = selectedSession.Id,
            NumberOfSeats = numberOfSeats,
            Seat = seat,
            Status = "Reserved",
            Price = selectedSession.TicketPrice * numberOfSeats,
            UserId = loggedInUser.Id // Przypisanie ID zalogowanego użytkownika
        };

        var ticketController = new TicketController(context);
        await ticketController.CreateTicketAsync(ticketDto);
        AnsiConsole.MarkupLine("[bold green]Bilet został pomyślnie zarezerwowany dla zalogowanego użytkownika![/]");
    }

             // Generowanie listy miejsc od A1 do J10
    static List<string> GenerateSeatChoices()
    {
        var seatChoices = new List<string>();
        for (char row = 'A'; row <= 'J'; row++)
        {
            for (int number = 1; number <= 10; number++)
            {
                seatChoices.Add($"{row}{number}");
            }
        }
        return seatChoices;
    }

    ///* dobre*/ static async Task EditTicket(ApplicationContext context, User loggedInUser)
    // {
    //     AnsiConsole.MarkupLine("[blue]Wywołano metodę EditTicket[/]");

    //     // Sprawdzenie, czy użytkownik ma rolę "user"
    //     if (string.IsNullOrEmpty(loggedInUser?.Role) || loggedInUser.Role != "user")
    //     {
    //         AnsiConsole.MarkupLine("[red]Tylko zalogowani użytkownicy mogą edytować bilety.[/]");
    //         return;
    //     }
    //     AnsiConsole.MarkupLine("[blue]Zalogowany użytkownik ma rolę 'user'[/]");

    //     var ticketController = new TicketController(context);
    //     var tickets = await ticketController.GetTicketsByUserIdAsync(loggedInUser.Id);

    //     // Sprawdzenie, czy są dostępne bilety do edycji
    //     if (tickets == null || tickets.Count == 0)
    //     {
    //         AnsiConsole.MarkupLine("[red]Brak dostępnych biletów do edycji dla tego użytkownika.[/]");
    //         return;
    //     }
    //     AnsiConsole.MarkupLine("[blue]Znaleziono bilety użytkownika[/]");

    //     // Wyświetlenie tabeli z biletami użytkownika
    //     var table = new Table().Border(TableBorder.Rounded);
    //     table.AddColumn("[u]ID[/]");
    //     table.AddColumn("[u]Seat[/]");
    //     table.AddColumn("[u]Status[/]");
    //     // table.AddColumn("[u]Price[/]");

    //     foreach (var ticket in tickets)
    //     {
    //         table.AddRow(ticket.Id.ToString(), ticket.Seat, ticket.Status);
    //     }

    //     AnsiConsole.Write(table);
    //     AnsiConsole.MarkupLine("[blue]Wyświetlono listę biletów[/]");

    //     // Wybór biletu do edycji
    //     var ticketId = AnsiConsole.Prompt(
    //         new SelectionPrompt<Guid>()
    //             .Title("[green]Wybierz ID biletu do edycji:[/]")
    //             .AddChoices(tickets.Select(t => t.Id))
    //     );

    //     AnsiConsole.MarkupLine($"[blue]Wybrano bilet o ID: {ticketId}[/]");

    //     // Pobranie istniejącego biletu z bazy danych
    //     var existingTicket = await ticketController.GetTicketByIdAsync(ticketId);
    //     if (existingTicket == null)
    //     {
    //         AnsiConsole.MarkupLine("[red]Nie znaleziono wybranego biletu.[/]");
    //         return;
    //     }

    //     var seat = AnsiConsole.Prompt(
    //         new SelectionPrompt<string>()
    //             .Title("[green]Podaj nowe miejsce (np. A1, B5):[/]")
    //             .AddChoices(GenerateSeatChoices())
    //     );

    //     //  string seat = AnsiConsole.Ask<string>("[green]Podaj nowe miejsce:[/]");
    //     string status = AnsiConsole.Prompt(
    //         new SelectionPrompt<string>()
    //             .Title("[green]Podaj nowy status biletu (np. 'Reserved', 'Cancelled'):[/]")
    //             .AddChoices("Reserved", "Cancelled", "Paid")
    //     );
    //     //  double price = AnsiConsole.Ask<double>("[green]Podaj nową cenę biletu:[/]");
    //     int numberOfSeats = AnsiConsole.Ask<int>("[green]Podaj nową liczbę miejsc:[/]");

    //     var ticketDto = new ticketDto
    //     {
    //         Id = ticketId,
    //         Seat = seat,
    //         Status = status,
    //         //   Price = price,
    //         NumberOfSeats = numberOfSeats,
    //         SessionId = existingTicket.SessionId, // Ustawienie istniejącego SessionId
    //         UserId = existingTicket.UserId // Ustawienie istniejącego UserId
    //     };

    //     await ticketController.UpdateTicketAsync(ticketDto);
    //     AnsiConsole.MarkupLine("[bold green]Bilet został pomyślnie zaktualizowany![/]");
    // }
    void a21() { }
    //static async Task EditTicket(ApplicationContext context, User loggedInUser)
    //{
    //    if (string.IsNullOrEmpty(loggedInUser?.Role) || loggedInUser.Role != "user")
    //    {
    //        AnsiConsole.MarkupLine("[red]Tylko zalogowani użytkownicy mogą edytować bilety.[/]");
    //        return;
    //    }

    //    var ticketController = new TicketController(context);
    //    var tickets = await ticketController.GetTicketsByUserIdAsync(loggedInUser.Id);

    //    if (tickets == null || tickets.Count == 0)
    //    {
    //        AnsiConsole.MarkupLine("[red]Brak dostępnych biletów do edycji dla tego użytkownika.[/]");
    //        return;
    //    }

    //    var table = new Table().Border(TableBorder.Rounded);
    //    table.AddColumn("[u]ID[/]");
    //    table.AddColumn("[u]Seat[/]");
    //    table.AddColumn("[u]Status[/]");
    //    table.AddColumn("[u]Liczba miejsc[/]");

    //    foreach (var ticket in tickets)
    //    {
    //        table.AddRow(ticket.Id.ToString(), ticket.Seat, ticket.Status, ticket.NumberOfSeats.ToString());
    //    }

    //    AnsiConsole.Write(table);

    //    // Wybór biletu do edycji
    //    var ticketId = AnsiConsole.Prompt(
    //        new SelectionPrompt<Guid>()
    //            .Title("[green]Wybierz ID biletu do edycji:[/]")
    //            .AddChoices(tickets.Select(t => t.Id))
    //    );

    //    // Pobranie biletu do edycji
    //    var selectedTicket = tickets.First(t => t.Id == ticketId);
    //    int originalNumberOfSeats = selectedTicket.NumberOfSeats;

    //    AnsiConsole.MarkupLine($"[blue]Liczba miejsc w wybranym bilecie: {originalNumberOfSeats}[/]");

    //    // Wybór nowych miejsc, zgodnie z oryginalną liczbą miejsc
    //    var seats = AnsiConsole.Prompt(
    //        new MultiSelectionPrompt<string>()
    //            .Title($"[green]Wybierz {originalNumberOfSeats} nowe miejsce(-a):[/]")
    //            .AddChoices(GenerateSeatChoices())
    //            .PageSize(10)
    //            .Required() // wymaga wyboru
    //            .MinimumSelectionCount(originalNumberOfSeats)
    //            .MaximumSelectionCount(originalNumberOfSeats)
    //    );

    //    string status = AnsiConsole.Prompt(
    //        new SelectionPrompt<string>()
    //            .Title("[green]Podaj nowy status biletu (np. 'Reserved', 'Cancelled'):[/]")
    //            .AddChoices("Reserved", "Cancelled", "Paid")
    //    );

    //    var ticketDto = new ticketDto
    //    {
    //        Id = ticketId,
    //        Seat = string.Join(", ", seats), // Zapisanie miejsc jako łańcuch (np. "A1, A2")
    //        Status = status,
    //        NumberOfSeats = originalNumberOfSeats // Liczba miejsc pozostaje taka sama
    //    };

    //    await ticketController.UpdateTicketAsync(ticketDto);
    //    AnsiConsole.MarkupLine("[bold green]Bilet został pomyślnie zaktualizowany![/]");
    //}

    // Funkcja generująca dostępne miejsca
    //static IEnumerable<string> GenerateSeatChoices()
    //{
    //    var rows = "ABCDEFGHIJ";
    //    for (int row = 0; row < rows.Length; row++)
    //    {
    //        for (int seat = 1; seat <= 10; seat++)
    //        {
    //            yield return $"{rows[row]}{seat}";
    //        }
    //    }
    //}
    void a23() { }

    void a() { }
    //static async Task EditTicket(ApplicationContext context, User loggedInUser)
    //{
    //    if (string.IsNullOrEmpty(loggedInUser?.Role) || loggedInUser.Role != "user")
    //    {
    //        AnsiConsole.MarkupLine("[red]Tylko zalogowani użytkownicy mogą edytować bilety.[/]");
    //        return;
    //    }

    //    var ticketController = new TicketController(context);
    //    var tickets = await ticketController.GetTicketsByUserIdAsync(loggedInUser.Id);

    //    if (tickets == null || tickets.Count == 0)
    //    {
    //        AnsiConsole.MarkupLine("[red]Brak dostępnych biletów do edycji dla tego użytkownika.[/]");
    //        return;
    //    }

    //    var table = new Table().Border(TableBorder.Rounded);
    //    table.AddColumn("[u]ID[/]");
    //    table.AddColumn("[u]Seat[/]");
    //    table.AddColumn("[u]Status[/]");
    //    // table.AddColumn("[u]Price[/]");

    //    foreach (var ticket in tickets)
    //    {
    //        table.AddRow(ticket.Id.ToString(), ticket.Seat, ticket.Status);
    //    }

    //    AnsiConsole.Write(table);

    //    var ticketId = AnsiConsole.Prompt(
    //        new SelectionPrompt<Guid>()
    //            .Title("[green]Wybierz ID biletu do edycji:[/]")
    //            .AddChoices(tickets.Select(t => t.Id))
    //    );

    //    // Wybór miejsca z ograniczoną listą
    //    var seat = AnsiConsole.Prompt(
    //        new SelectionPrompt<string>()
    //            .Title("[green]Podaj nowe miejsce (np. A1, B5):[/]")
    //            .AddChoices(GenerateSeatChoices())
    //    );

    //    string status = AnsiConsole.Prompt(
    //        new SelectionPrompt<string>()
    //            .Title("[green]Podaj nowy status biletu (np. 'Reserved', 'Cancelled'):[/]")
    //            .AddChoices("Reserved", "Cancelled", "Paid")
    //    );
    //    // double price = AnsiConsole.Ask<double>("[green]Podaj nową cenę biletu:[/]");
    //    int numberOfSeats = AnsiConsole.Ask<int>("[green]Podaj nową liczbę miejsc:[/]");

    //    var ticketDto = new ticketDto
    //    {
    //        Id = ticketId,
    //        Seat = seat,
    //        Status = status,
    //        //  Price = price,
    //        NumberOfSeats = numberOfSeats
    //    };

    //    await ticketController.UpdateTicketAsync(ticketDto);
    //    AnsiConsole.MarkupLine("[bold green]Bilet został pomyślnie zaktualizowany![/]");
    //}


    //static async Task DeleteTicket(ApplicationContext context)
    //{
    //    var userController = new UserController(context);
    //    var users = await userController.GetUserAsync();

    //    if (users == null || users.Count == 0)
    //    {
    //        AnsiConsole.MarkupLine("[red]Brak dostępnych użytkowników.[/]");
    //        return;
    //    }

    //    // Wyświetlenie tabeli z użytkownikami
    //    var userTable = new Table().Border(TableBorder.Rounded);
    //    userTable.AddColumn("[u]ID[/]");
    //    userTable.AddColumn("[u]Imię[/]");
    //    userTable.AddColumn("[u]Nazwisko[/]");
    //    userTable.AddColumn("[u]Email[/]");

    //    foreach (var user in users)
    //    {
    //        userTable.AddRow(user.Id.ToString(), user.Name, user.LastName, user.Email);
    //    }

    //    AnsiConsole.Write(userTable);

    //    var userId = AnsiConsole.Ask<Guid>("[green]Podaj ID użytkownika, aby pobrać jego bilety:[/]");
    //    var ticketController = new TicketController(context);
    //    var tickets = await ticketController.GetTicketsByUserIdAsync(userId);

    //    if (tickets == null || tickets.Count == 0)
    //    {
    //        AnsiConsole.MarkupLine("[red]Brak dostępnych biletów do usunięcia dla tego użytkownika.[/]");
    //        return;
    //    }

    //    // Wyświetlenie tabeli z biletami
    //    var table = new Table().Border(TableBorder.Rounded);
    //    table.AddColumn("[u]ID[/]");
    //    table.AddColumn("[u]Seat[/]");
    //    table.AddColumn("[u]Status[/]");
    //    table.AddColumn("[u]Price[/]");

    //    foreach (var ticket in tickets)
    //    {
    //        table.AddRow(ticket.Id.ToString(), ticket.Seat, ticket.Status, ticket.Price.ToString("C"));
    //    }

    //    AnsiConsole.Write(table);

    //    // Pobranie ID biletu do usunięcia
    //    var ticketId = AnsiConsole.Prompt(
    //        new SelectionPrompt<Guid>()
    //            .Title("[green]Wybierz ID biletu do usunięcia:[/]")
    //            .AddChoices(tickets.Select(t => t.Id))
    //    );

    //    await ticketController.DeleteTicketByIdAsync(ticketId);
    //    AnsiConsole.MarkupLine("[bold red]Bilet został pomyślnie usunięty![/]");
    //}
    //session
    void a2() { }

    static async Task EditTicket(ApplicationContext context, User loggedInUser)
    {
        if (string.IsNullOrEmpty(loggedInUser?.Role) || loggedInUser.Role != "user")
        {
            AnsiConsole.MarkupLine("[red]Tylko zalogowani użytkownicy mogą edytować bilety.[/]");
            return;
        }

        var ticketController = new TicketController(context);
        var tickets = await ticketController.GetTicketsByUserIdAsync(loggedInUser.Id);

        if (tickets == null || tickets.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]Brak dostępnych biletów do edycji dla tego użytkownika.[/]");
            return;
        }

        var table = new Table().Border(TableBorder.Rounded);
        table.AddColumn("[u]ID[/]");
        table.AddColumn("[u]Seat[/]");
        table.AddColumn("[u]Status[/]");
        table.AddColumn("[u]Liczba miejsc[/]");

        foreach (var ticket in tickets)
        {
            table.AddRow(ticket.Id.ToString(), ticket.Seat, ticket.Status, ticket.NumberOfSeats.ToString());
        }

        AnsiConsole.Write(table);

        // Wybór biletu do edycji
        var ticketId = AnsiConsole.Prompt(
            new SelectionPrompt<Guid>()
                .Title("[green]Wybierz ID biletu do edycji:[/]")
                .AddChoices(tickets.Select(t => t.Id))
        );

        // Pobranie biletu do edycji
        var selectedTicket = tickets.FirstOrDefault(t => t.Id == ticketId);

        if (selectedTicket == null)
        {
            AnsiConsole.MarkupLine("[red]Nie znaleziono biletu do edycji.[/]");
            return;
        }

        // Ensure the UserId is valid and retained
        var user = await context.Users.FindAsync(selectedTicket.UserId);
        if (user == null)
        {
            AnsiConsole.MarkupLine("[red]Użytkownik przypisany do tego biletu nie istnieje.[/]");
            return;
        }

        int originalNumberOfSeats = selectedTicket.NumberOfSeats;
        AnsiConsole.MarkupLine($"[blue]Liczba miejsc w wybranym bilecie: {originalNumberOfSeats}[/]");

        // Wybór nowych miejsc, zgodnie z oryginalną liczbą miejsc
        List<string> seats;
        do
        {
            seats = AnsiConsole.Prompt(
                new MultiSelectionPrompt<string>()
                    .Title($"[green]Wybierz {originalNumberOfSeats} nowe miejsce(-a):[/]")
                    .AddChoices(GenerateSeatChoices())
                    .PageSize(10)
            );

            if (seats.Count != originalNumberOfSeats)
            {
                AnsiConsole.MarkupLine($"[red]Musisz wybrać dokładnie {originalNumberOfSeats} miejsc(-a).[/]");
            }
        }
        while (seats.Count != originalNumberOfSeats);

        string status = AnsiConsole.Prompt(
            new SelectionPrompt<string>()
                .Title("[green]Podaj nowy status biletu (np. 'Reserved', 'Cancelled'):[/]")
                .AddChoices("Reserved", "Cancelled", "Paid")
        );

        // Update the ticket with new information, preserving the original UserId
        var ticketDto = new ticketDto
        {
            Id = ticketId,
            Seat = string.Join(", ", seats), // Zapisanie miejsc jako łańcuch (np. "A1, A2")
            Status = status,
            NumberOfSeats = originalNumberOfSeats,
            UserId = selectedTicket.UserId, // Ensure we keep the existing valid UserId
            SessionId = selectedTicket.SessionId // Ensure we keep the existing valid SessionId
        };

        await ticketController.UpdateTicketAsync(ticketDto);
        AnsiConsole.MarkupLine("[bold green]Bilet został pomyślnie zaktualizowany![/]");
    }


    static async Task DeleteTicket(ApplicationContext context, User loggedInUser)
    {
        // Sprawdzenie, czy użytkownik jest zalogowany i ma rolę "user"
        if (string.IsNullOrEmpty(loggedInUser?.Role) || loggedInUser.Role != "user")
        {
            AnsiConsole.MarkupLine("[red]Tylko zalogowani użytkownicy mogą usuwać bilety.[/]");
            return;
        }

        // Pobranie biletów użytkownika
        var ticketController = new TicketController(context);
        var tickets = await ticketController.GetTicketsByUserIdAsync(loggedInUser.Id);

        // Sprawdzenie, czy użytkownik ma jakiekolwiek bilety
        if (tickets == null || tickets.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]Brak dostępnych biletów do usunięcia dla tego użytkownika.[/]");
            return;
        }

        // Wyświetlenie tabeli z biletami użytkownika
        var table = new Table().Border(TableBorder.Rounded);
        table.AddColumn("[u]ID[/]");
        table.AddColumn("[u]Seat[/]");
        table.AddColumn("[u]Status[/]");
        table.AddColumn("[u]Cena[/]");

        foreach (var ticket in tickets)
        {
            table.AddRow(ticket.Id.ToString(), ticket.Seat, ticket.Status, ticket.Price.ToString("C"));
        }

        AnsiConsole.Write(table);

        // Wybór biletu do usunięcia
        var ticketId = AnsiConsole.Prompt(
            new SelectionPrompt<Guid>()
                .Title("[green]Wybierz ID biletu do usunięcia:[/]")
                .AddChoices(tickets.Select(t => t.Id))
        );

        // Potwierdzenie usunięcia
        bool confirmDelete = AnsiConsole.Confirm("[yellow]Czy na pewno chcesz usunąć wybrany bilet?[/]");
        if (!confirmDelete)
        {
            AnsiConsole.MarkupLine("[yellow]Usunięcie biletu zostało anulowane.[/]");
            return;
        }

        // Usunięcie biletu z bazy danych
        await ticketController.DeleteTicketByIdAsync(ticketId);
        AnsiConsole.MarkupLine("[bold red]Bilet został pomyślnie usunięty![/]");
    }

    static async Task ShowSessions(ApplicationContext context)
    {
        var sessionController = new SessionController(context);
        var sessions = await sessionController.GetSessionAsync();

        if (sessions == null || sessions.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]Brak dostępnych sesji.[/]");
            return;
        }

        var table = new Table().Border(TableBorder.Rounded);
        table.AddColumn("[u]Film[/]");
        table.AddColumn("[u]Kino[/]");
        table.AddColumn("[u]Sala[/]");
        table.AddColumn("[u]Data[/]");
        table.AddColumn("[u]Cena biletu[/]");

        foreach (var session in sessions)
        {
            // Pobranie powiązanych obiektów
            var movie = await context.Movies.FindAsync(session.MovieId);
            var hall = await context.Halls.FindAsync(session.HallId);
            var cinema = hall != null ? await context.Cinemas.FindAsync(hall.CinemaId) : null;

            // Dodanie wiersza do tabeli z pełnymi nazwami zamiast ID
            table.AddRow(
                movie?.Title ?? "[red]Nieznany film[/]",
                cinema?.Name ?? "[red]Nieznane kino[/]",
                hall?.Number ?? "[red]Nieznana sala[/]",
                session.Date.ToString("yyyy-MM-dd HH:mm"),
                session.TicketPrice.ToString("C")
            );
        }

        AnsiConsole.Write(table);
    }


    //static async Task AddSession(ApplicationContext context)
    //{
    //    // Wyświetlenie listy filmów
    //    var movieController = new MovieController(context);
    //    var movies = await movieController.GetMoviesAsync();

    //    if (movies == null || movies.Count == 0)
    //    {
    //        AnsiConsole.MarkupLine("[red]Brak dostępnych filmów.[/]");
    //        return;
    //    }

    //    var movieTable = new Table().Border(TableBorder.Rounded);
    //    movieTable.AddColumn("[u]ID[/]");
    //    movieTable.AddColumn("[u]Tytuł[/]");
    //    movieTable.AddColumn("[u]Gatunek[/]");
    //    movieTable.AddColumn("[u]Reżyser[/]");

    //    foreach (var movie in movies)
    //    {
    //        movieTable.AddRow(movie.Id.ToString(), movie.Title, movie.Genre, movie.Director);
    //    }

    //    AnsiConsole.Write(movieTable);

    //    // Wybór filmu
    //    var movieId = AnsiConsole.Prompt(
    //        new SelectionPrompt<Guid>()
    //            .Title("[green]Wybierz ID filmu:[/]")
    //            .AddChoices(movies.Select(m => m.Id))
    //    );

    //    // Wyświetlenie listy sal
    //    var hallController = new HallController(context);
    //    var halls = await hallController.GetHallsAsync();

    //    if (halls == null || halls.Count == 0)
    //    {
    //        AnsiConsole.MarkupLine("[red]Brak dostępnych sal.[/]");
    //        return;
    //    }

    //    var hallTable = new Table().Border(TableBorder.Rounded);
    //    hallTable.AddColumn("[u]ID[/]");
    //    hallTable.AddColumn("[u]Numer[/]");
    //    hallTable.AddColumn("[u]Liczba miejsc[/]");

    //    foreach (var hall in halls)
    //    {
    //        hallTable.AddRow(hall.Id.ToString(), hall.Number, hall.Seats.ToString());
    //    }

    //    AnsiConsole.Write(hallTable);

    //    // Wybór sali
    //    var hallId = AnsiConsole.Prompt(
    //        new SelectionPrompt<Guid>()
    //            .Title("[green]Wybierz ID sali:[/]")
    //            .AddChoices(halls.Select(h => h.Id))
    //    );

    //    // Pobranie danych sesji
    //    var sessionDate = AnsiConsole.Ask<DateTime>("[green]Podaj datę sesji (yyyy-MM-dd HH:mm):[/]");
    //    var ticketPrice = AnsiConsole.Ask<double>("[green]Podaj cenę biletu:[/]");
    //    var availableSeats = AnsiConsole.Ask<int>("[green]Podaj liczbę dostępnych miejsc:[/]");

    //    var sessionDto = new sessionDto
    //    {
    //        MovieId = movieId,
    //        HallId = hallId,
    //        Date = sessionDate,
    //        TicketPrice = ticketPrice,
    //        AvailibleSeats = availableSeats
    //    };

    //    var sessionController = new SessionController(context);
    //    await sessionController.CreateSessionAsync(sessionDto);
    //    AnsiConsole.MarkupLine("[bold green]Sesja została pomyślnie dodana![/]");
    //}
    static async Task AddSession(ApplicationContext context)
    {
        // Wyświetlenie listy filmów
        var movieController = new MovieController(context);
        var movies = await movieController.GetMoviesAsync();

        if (movies == null || movies.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]Brak dostępnych filmów.[/]");
            return;
        }

        var movieTable = new Table().Border(TableBorder.Rounded);
        movieTable.AddColumn("[u]ID[/]");
        movieTable.AddColumn("[u]Tytuł[/]");
        movieTable.AddColumn("[u]Gatunek[/]");
        movieTable.AddColumn("[u]Reżyser[/]");

        foreach (var movie in movies)
        {
            movieTable.AddRow(movie.Id.ToString(), movie.Title, movie.Genre, movie.Director);
        }

        AnsiConsole.Write(movieTable);

        // Wybór filmu
        var movieId = AnsiConsole.Prompt(
            new SelectionPrompt<Guid>()
                .Title("[green]Wybierz ID filmu:[/]")
                .AddChoices(movies.Select(m => m.Id))
        );

        // Wyświetlenie listy sal
        var hallController = new HallController(context);
        var halls = await hallController.GetHallsAsync();

        if (halls == null || halls.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]Brak dostępnych sal.[/]");
            return;
        }

        var hallTable = new Table().Border(TableBorder.Rounded);
        hallTable.AddColumn("[u]ID[/]");
        hallTable.AddColumn("[u]Numer sali[/]");
        hallTable.AddColumn("[u]Liczba miejsc[/]");

        foreach (var hall in halls)
        {
            hallTable.AddRow(hall.Id.ToString(), hall.Number, hall.Seats.ToString());
        }

        AnsiConsole.Write(hallTable);

        // Wybór sali
        var hallId = AnsiConsole.Prompt(
            new SelectionPrompt<Guid>()
                .Title("[green]Wybierz ID sali:[/]")
                .AddChoices(halls.Select(h => h.Id))
        );

        // Podanie dodatkowych informacji do sesji
        var sessionDate = AnsiConsole.Ask<DateTime>("[green]Podaj datę sesji (yyyy-MM-dd HH:mm):[/]");
        var ticketPrice = AnsiConsole.Ask<double>("[green]Podaj cenę biletu:[/]");
        var availableSeats = AnsiConsole.Ask<int>("[green]Podaj liczbę dostępnych miejsc:[/]");

        var sessionDto = new sessionDto
        {
            MovieId = movieId,
            HallId = hallId,
            Date = sessionDate,
            TicketPrice = ticketPrice,
            AvailibleSeats = availableSeats
        };

        var sessionController = new SessionController(context);
        await sessionController.CreateSessionAsync(sessionDto);
        AnsiConsole.MarkupLine("[bold green]Sesja została pomyślnie dodana![/]");
    }

    //static async Task EditSession(ApplicationContext context)
    //{
    //    // Wyświetlenie listy sesji
    //    var sessionController = new SessionController(context);
    //    var sessions = await sessionController.GetSessionAsync();

    //    if (sessions == null || sessions.Count == 0)
    //    {
    //        AnsiConsole.MarkupLine("[red]Brak dostępnych sesji do edycji.[/]");
    //        return;
    //    }

    //    var sessionTable = new Table().Border(TableBorder.Rounded);
    //    sessionTable.AddColumn("[u]ID[/]");
    //    sessionTable.AddColumn("[u]Film ID[/]");
    //    sessionTable.AddColumn("[u]Sala ID[/]");
    //    sessionTable.AddColumn("[u]Data[/]");
    //    sessionTable.AddColumn("[u]Cena biletu[/]");
    //    sessionTable.AddColumn("[u]Dostępne miejsca[/]");

    //    foreach (var session in sessions)
    //    {
    //        sessionTable.AddRow(
    //            session.Id.ToString(),
    //            session.MovieId.ToString(),
    //            session.HallId.ToString(),
    //            session.Date.ToString("yyyy-MM-dd HH:mm"),
    //            session.TicketPrice.ToString("C"),
    //            session.AvailibleSeats.ToString()
    //        );
    //    }

    //    AnsiConsole.Write(sessionTable);

    //    // Wybór sesji do edycji
    //    var sessionId = AnsiConsole.Prompt(
    //        new SelectionPrompt<Guid>()
    //            .Title("[green]Wybierz ID sesji do edycji:[/]")
    //            .AddChoices(sessions.Select(s => s.Id))
    //    );

    //    // Pobranie nowych danych sesji
    //    var sessionDate = AnsiConsole.Ask<DateTime>("[green]Podaj nową datę sesji (yyyy-MM-dd HH:mm):[/]");
    //    var ticketPrice = AnsiConsole.Ask<double>("[green]Podaj nową cenę biletu:[/]");
    // //   var availableSeats = AnsiConsole.Ask<int>("[green]Podaj nową liczbę dostępnych miejsc:[/]");

    //    var sessionDto = new sessionDto
    //    {
    //        Id = sessionId,
    //        Date = sessionDate,
    //        TicketPrice = ticketPrice,
    //       // AvailibleSeats = availableSeats
    //    };

    //    await sessionController.UpdateSessionAsync(sessionDto);
    //    AnsiConsole.MarkupLine("[bold green]Sesja została pomyślnie zaktualizowana![/]");
    //}

    static async Task EditSession(ApplicationContext context)
    {
        var sessionController = new SessionController(context);
        var sessions = await sessionController.GetSessionAsync();

        if (sessions == null || sessions.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]Brak dostępnych sesji do edycji.[/]");
            return;
        }

        // Display sessions
        var sessionTable = new Table().Border(TableBorder.Rounded);
        sessionTable.AddColumn("[u]ID[/]");
        sessionTable.AddColumn("[u]Film ID[/]");
        sessionTable.AddColumn("[u]Sala ID[/]");
        sessionTable.AddColumn("[u]Data[/]");
        sessionTable.AddColumn("[u]Cena biletu[/]");
        sessionTable.AddColumn("[u]Dostępne miejsca[/]");

        foreach (var session in sessions)
        {
            sessionTable.AddRow(
                session.Id.ToString(),
                session.MovieId.ToString(),
                session.HallId.ToString(),
                session.Date.ToString("yyyy-MM-dd HH:mm"),
                session.TicketPrice.ToString("C"),
                session.AvailibleSeats.ToString()
            );
        }

        AnsiConsole.Write(sessionTable);

        // Select session to edit
        var sessionId = AnsiConsole.Prompt(
            new SelectionPrompt<Guid>()
                .Title("[green]Wybierz ID sesji do edycji:[/]")
                .AddChoices(sessions.Select(s => s.Id))
        );

        var selectedSession = sessions.FirstOrDefault(s => s.Id == sessionId);
        if (selectedSession == null)
        {
            AnsiConsole.MarkupLine("[red]Nie znaleziono sesji o podanym ID.[/]");
            return;
        }

        // Ensure HallId exists
        var hall = context.Halls.FirstOrDefault(h => h.Id == selectedSession.HallId);
        if (hall == null)
        {
            AnsiConsole.MarkupLine("[red]Sala powiązana z tą sesją już nie istnieje. Edycja niemożliwa.[/]");
            return;
        }

        // Get new session data
        var sessionDate = AnsiConsole.Ask<DateTime>("[green]Podaj nową datę sesji (yyyy-MM-dd HH:mm):[/]");
        var ticketPrice = AnsiConsole.Ask<double>("[green]Podaj nową cenę biletu:[/]");

        // Update session DTO
        var sessionDto = new sessionDto
        {
            Id = sessionId,
            Date = sessionDate,
            TicketPrice = ticketPrice,
            HallId = selectedSession.HallId, // Ensure HallId is not lost
            MovieId = selectedSession.MovieId // Ensure MovieId is preserved
        };

        try
        {
            await sessionController.UpdateSessionAsync(sessionDto);
            AnsiConsole.MarkupLine("[bold green]Sesja została pomyślnie zaktualizowana![/]");
        }
        catch (Exception ex)
        {
            AnsiConsole.MarkupLine($"[red]Wystąpił błąd podczas aktualizacji sesji: {ex.Message}[/]");
        }
    }


    static async Task DeleteSession(ApplicationContext context)
    {
        // Wyświetlenie listy sesji
        var sessionController = new SessionController(context);
        var sessions = await sessionController.GetSessionAsync();

        if (sessions == null || sessions.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]Brak dostępnych sesji do usunięcia.[/]");
            return;
        }

        var sessionTable = new Table().Border(TableBorder.Rounded);
        sessionTable.AddColumn("[u]ID[/]");
        sessionTable.AddColumn("[u]Film ID[/]");
        sessionTable.AddColumn("[u]Sala ID[/]");
        sessionTable.AddColumn("[u]Data[/]");
        sessionTable.AddColumn("[u]Cena biletu[/]");
        sessionTable.AddColumn("[u]Dostępne miejsca[/]");

        foreach (var session in sessions)
        {
            sessionTable.AddRow(
                session.Id.ToString(),
                session.MovieId.ToString(),
                session.HallId.ToString(),
                session.Date.ToString("yyyy-MM-dd HH:mm"),
                session.TicketPrice.ToString("C"),
                session.AvailibleSeats.ToString()
            );
        }

        AnsiConsole.Write(sessionTable);

        // Wybór sesji do usunięcia
        var sessionId = AnsiConsole.Prompt(
            new SelectionPrompt<Guid>()
                .Title("[green]Wybierz ID sesji do usunięcia:[/]")
                .AddChoices(sessions.Select(s => s.Id))
        );

        await sessionController.DeleteSessionByIdAsync(sessionId);
        AnsiConsole.MarkupLine("[bold red]Sesja została pomyślnie usunięta![/]");
    }

    //cinemas
    static async Task ShowCinemasAdmin(ApplicationContext context)
    {
        var cinemaController = new CinemaController(context);
        var cinemas = await cinemaController.GetCinemasAsync();

        if (cinemas == null || cinemas.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]Brak dostępnych kin.[/]");
            return;
        }

        // Wyświetlenie tabeli z kinami
        var cinemaTable = new Table().Border(TableBorder.Rounded);
        cinemaTable.AddColumn("[u]ID[/]");
        cinemaTable.AddColumn("[u]Nazwa[/]");
        cinemaTable.AddColumn("[u]Adres[/]");

        foreach (var cinema in cinemas)
        {
            cinemaTable.AddRow(cinema.Id.ToString(), cinema.Name, cinema.Address);
        }

        AnsiConsole.Write(cinemaTable);
    }

    static async Task ShowCinemas(ApplicationContext context)
    {
        var cinemaController = new CinemaController(context);
        var cinemas = await cinemaController.GetCinemasAsync();

        if (cinemas == null || cinemas.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]Brak dostępnych kin.[/]");
            return;
        }

        // Wyświetlenie tabeli z kinami
        var cinemaTable = new Table().Border(TableBorder.Rounded);
      //  cinemaTable.AddColumn("[u]ID[/]");
        cinemaTable.AddColumn("[u]Nazwa[/]");
        cinemaTable.AddColumn("[u]Adres[/]");

        foreach (var cinema in cinemas)
        {
            cinemaTable.AddRow( cinema.Name, cinema.Address);
        }

        AnsiConsole.Write(cinemaTable);
    }


    static async Task AddCinema(ApplicationContext context)
    {
        string name = AnsiConsole.Ask<string>("[green]Podaj nazwę kina:[/]");
        string address = AnsiConsole.Ask<string>("[green]Podaj adres kina:[/]");

        var cinemaDto = new cinemaDto { Name = name, Address = address };
        var cinemaController = new CinemaController(context);
        await cinemaController.CreateCinemaAsync(cinemaDto);
        AnsiConsole.MarkupLine("[bold green]Kino zostało pomyślnie dodane![/]");
    }

    static async Task EditCinema(ApplicationContext context)
    {
        var cinemaController = new CinemaController(context);
        var cinemas = await cinemaController.GetCinemasAsync();

        if (cinemas == null || cinemas.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]Brak dostępnych kin do edycji.[/]");
            return;
        }

        // Wyświetlenie tabeli z kinami
        var cinemaTable = new Table().Border(TableBorder.Rounded);
        cinemaTable.AddColumn("[u]ID[/]");
        cinemaTable.AddColumn("[u]Nazwa[/]");
        cinemaTable.AddColumn("[u]Adres[/]");

        foreach (var cinema in cinemas)
        {
            cinemaTable.AddRow(cinema.Id.ToString(), cinema.Name, cinema.Address);
        }

        AnsiConsole.Write(cinemaTable);

        // Wybór kina do edycji
        var cinemaId = AnsiConsole.Prompt(
            new SelectionPrompt<Guid>()
                .Title("[green]Wybierz ID kina do edycji:[/]")
                .AddChoices(cinemas.Select(c => c.Id))
        );

        // Pobranie nowych danych dla kina
        string name = AnsiConsole.Ask<string>("[green]Podaj nową nazwę kina:[/]");
        string address = AnsiConsole.Ask<string>("[green]Podaj nowy adres kina:[/]");

        var cinemaDto = new cinemaDto { Id = cinemaId, Name = name, Address = address };
        await cinemaController.UpdateCinemaAsync(cinemaDto);
        AnsiConsole.MarkupLine("[bold green]Kino zostało pomyślnie zaktualizowane![/]");
    }

    static async Task DeleteCinema(ApplicationContext context)
    {
        var cinemaController = new CinemaController(context);
        var cinemas = await cinemaController.GetCinemasAsync();

        if (cinemas == null || cinemas.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]Brak dostępnych kin do usunięcia.[/]");
            return;
        }

        // Wyświetlenie tabeli z kinami
        var cinemaTable = new Table().Border(TableBorder.Rounded);
        cinemaTable.AddColumn("[u]ID[/]");
        cinemaTable.AddColumn("[u]Nazwa[/]");
        cinemaTable.AddColumn("[u]Adres[/]");

        foreach (var cinema in cinemas)
        {
            cinemaTable.AddRow(cinema.Id.ToString(), cinema.Name, cinema.Address);
        }

        AnsiConsole.Write(cinemaTable);

        // Wybór kina do usunięcia
        var cinemaId = AnsiConsole.Prompt(
            new SelectionPrompt<Guid>()
                .Title("[green]Wybierz ID kina do usunięcia:[/]")
                .AddChoices(cinemas.Select(c => c.Id))
        );

        await cinemaController.DeleteCinemaAsync(cinemaId);
        AnsiConsole.MarkupLine("[bold red]Kino zostało pomyślnie usunięte![/]");
    }
    //halls

    static async Task ShowHalls(ApplicationContext context)
    {
        var hallController = new HallController(context);
        var halls = await hallController.GetHallsAsync();

        if (halls == null || halls.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]Brak dostępnych sal.[/]");
            return;
        }

        // Wyświetlenie tabeli z salami
        var hallTable = new Table().Border(TableBorder.Rounded);
        hallTable.AddColumn("[u]ID[/]");
        hallTable.AddColumn("[u]Numer sali[/]");
        hallTable.AddColumn("[u]Liczba miejsc[/]");
        hallTable.AddColumn("[u]Kino ID[/]");

        foreach (var hall in halls)
        {
            hallTable.AddRow(hall.Id.ToString(), hall.Number, hall.Seats.ToString(), hall.CinemaId.ToString());
        }

        AnsiConsole.Write(hallTable);
    }

    static async Task AddHall(ApplicationContext context)
    {
        // Wyświetlenie listy kin dla ułatwienia wyboru
        var cinemaController = new CinemaController(context);
        var cinemas = await cinemaController.GetCinemasAsync();

        if (cinemas == null || cinemas.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]Brak dostępnych kin.[/]");
            return;
        }

        var cinemaTable = new Table().Border(TableBorder.Rounded);
        cinemaTable.AddColumn("[u]ID[/]");
        cinemaTable.AddColumn("[u]Nazwa[/]");
        cinemaTable.AddColumn("[u]Adres[/]");

        foreach (var cinema in cinemas)
        {
            cinemaTable.AddRow(cinema.Id.ToString(), cinema.Name, cinema.Address);
        }

        AnsiConsole.Write(cinemaTable);

        // Pobranie informacji o nowej sali
        string number = AnsiConsole.Ask<string>("[green]Podaj nowy numer sali:[/]");
        int seats = AnsiConsole.Ask<int>("[green]Podaj liczbę miejsc w sali:[/]");

        // Wybór ID kina
        var cinemaId = AnsiConsole.Prompt(
            new SelectionPrompt<Guid>()
                .Title("[green]Wybierz ID kina, do którego należy sala:[/]")
                .AddChoices(cinemas.Select(c => c.Id))
        );

        var hallDto = new hallDto { Number = number, Seats = seats, CinemaId = cinemaId };
        var hallController = new HallController(context);
        await hallController.CreateHallAsync(hallDto);
        AnsiConsole.MarkupLine("[bold green]Sala została pomyślnie dodana![/]");
    }

    static async Task EditHall(ApplicationContext context)
    {
        var hallController = new HallController(context);
        var halls = await hallController.GetHallsAsync();

        if (halls == null || halls.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]Brak dostępnych sal do edycji.[/]");
            return;
        }

        // Wyświetlenie tabeli z salami
        var hallTable = new Table().Border(TableBorder.Rounded);
        hallTable.AddColumn("[u]ID[/]");
        hallTable.AddColumn("[u]Numer sali[/]");
        hallTable.AddColumn("[u]Liczba miejsc[/]");
        hallTable.AddColumn("[u]Kino ID[/]");

        foreach (var hall in halls)
        {
            hallTable.AddRow(hall.Id.ToString(), hall.Number, hall.Seats.ToString(), hall.CinemaId.ToString());
        }

        AnsiConsole.Write(hallTable);

        // Wybór ID sali do edycji
        var hallId = AnsiConsole.Prompt(
            new SelectionPrompt<Guid>()
                .Title("[green]Wybierz ID sali do edycji:[/]")
                .AddChoices(halls.Select(h => h.Id))
        );

        // Pobranie nowych informacji o sali
        string number = AnsiConsole.Ask<string>("[green]Podaj nowy numer sali:[/]");
        int seats = AnsiConsole.Ask<int>("[green]Podaj nową liczbę miejsc:[/]");

        // Wybór ID kina
        var cinemaController = new CinemaController(context);
        var cinemas = await cinemaController.GetCinemasAsync();
        if (cinemas == null || cinemas.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]Brak dostępnych kin.[/]");
            return;
        }

        var cinemaId = AnsiConsole.Prompt(
            new SelectionPrompt<Guid>()
                .Title("[green]Wybierz nowe ID kina, do którego należy sala:[/]")
                .AddChoices(cinemas.Select(c => c.Id))
        );

        var hallDto = new hallDto { Id = hallId, Number = number, Seats = seats, CinemaId = cinemaId };
        await hallController.UpdateHallAsync(hallDto);
        AnsiConsole.MarkupLine("[bold green]Sala została pomyślnie zaktualizowana![/]");
    }

    static async Task DeleteHall(ApplicationContext context)
    {
        var hallController = new HallController(context);
        var halls = await hallController.GetHallsAsync();

        if (halls == null || halls.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]Brak dostępnych sal do usunięcia.[/]");
            return;
        }

        // Wyświetlenie tabeli z salami
        var hallTable = new Table().Border(TableBorder.Rounded);
        hallTable.AddColumn("[u]ID[/]");
        hallTable.AddColumn("[u]Numer sali[/]");
        hallTable.AddColumn("[u]Liczba miejsc[/]");
        hallTable.AddColumn("[u]Kino ID[/]");

        foreach (var hall in halls)
        {
            hallTable.AddRow(hall.Id.ToString(), hall.Number, hall.Seats.ToString(), hall.CinemaId.ToString());
        }

        AnsiConsole.Write(hallTable);

        // Wybór ID sali do usunięcia
        var hallId = AnsiConsole.Prompt(
            new SelectionPrompt<Guid>()
                .Title("[green]Wybierz ID sali do usunięcia:[/]")
                .AddChoices(halls.Select(h => h.Id))
        );

        await hallController.DeleteHallAsync(hallId);
        AnsiConsole.MarkupLine("[bold red]Sala została pomyślnie usunięta![/]");
    }
    //users
    /// <summary>
    /// 
    /// </summary>
    /// <param name="context"></param>
    /// <returns></returns>
    //static async Task<User> LoginUser(ApplicationContext context)
    //{
    //    string email = AnsiConsole.Ask<string>("[green]Wprowadź email:[/]");
    //    string password = AnsiConsole.Prompt(
    //        new TextPrompt<string>("[green]Wprowadź hasło:[/]")
    //            .PromptStyle("red")
    //            .Secret()
    //    );

    //    var loginController = new LoginController(context);
    //    var result = await loginController.Login(new Login { Email = email, Password = password });

    //    if (result is OkObjectResult okResult)
    //    {
    //        var response = JObject.FromObject(okResult.Value);
    //        var userResponse = response["User"]?.ToObject<User>();
    //        return userResponse;
    //    }
    //    else
    //    {
    //        AnsiConsole.MarkupLine("[bold red]Niepoprawne dane logowania.[/]");
    //        return null;
    //    }
    //}

    static async Task<User> LoginUser(ApplicationContext context)
    {
        while (true)
        {
            string email = AnsiConsole.Ask<string>("[green]Wprowadź email:[/]");
            string password = AnsiConsole.Prompt(
                new TextPrompt<string>("[green]Wprowadź hasło:[/]")
                    .PromptStyle("red")
                    .Secret()
            );

            var loginController = new LoginController(context);
            var result = await loginController.Login(new Login { Email = email, Password = password });

            if (result is OkObjectResult okResult)
            {
                // Try to extract the User object from the wrapper
                var wrapper = okResult.Value;
                var userProperty = wrapper.GetType().GetProperty("User");
                if (userProperty != null)
                {
                    var user = userProperty.GetValue(wrapper) as User;
                    if (user != null)
                    {
                        AnsiConsole.MarkupLine("[bold green]Logowanie zakończone sukcesem![/]");
                        return user;
                    }
                }
                else
                {
                    AnsiConsole.MarkupLine("[red]Unexpected login response format. Spróbuj ponownie.[/]");
                    AnsiConsole.MarkupLine($"[grey]Received response: {okResult.Value}[/]");
                }
            }
            else
            {
                AnsiConsole.MarkupLine("[bold red]Niepoprawne dane logowania. Spróbuj ponownie.[/]");
            }
        }
    }



    static async Task ShowUsers(ApplicationContext context)
    {
        var userController = new UserController(context);
        var users = await userController.GetUserAsync();

        if (users == null || users.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]Brak dostępnych użytkowników.[/]");
            return;
        }

        // Wyświetlenie tabeli z użytkownikami
        var userTable = new Table().Border(TableBorder.Rounded);
        userTable.AddColumn("[u]ID[/]");
        userTable.AddColumn("[u]Imię[/]");
        userTable.AddColumn("[u]Nazwisko[/]");
        userTable.AddColumn("[u]Email[/]");

        foreach (var user in users)
        {
            userTable.AddRow(user.Id.ToString(), user.Name, user.LastName, user.Email);
        }

        AnsiConsole.Write(userTable);
    }

    static async Task AddUser(ApplicationContext context)
    {
        string name = AnsiConsole.Ask<string>("[green]Podaj imię:[/]");
        string lastName = AnsiConsole.Ask<string>("[green]Podaj nazwisko:[/]");
        string email = AnsiConsole.Ask<string>("[green]Podaj email:[/]");
        string password = AnsiConsole.Prompt(
            new TextPrompt<string>("[green]Podaj hasło:[/]")
                .PromptStyle("red")
                .Secret()
        );

        var userDto = new userDto { Name = name, LastName = lastName, Email = email, Password = password };
        var userController = new UserController(context);
        await userController.CreateUserAsync(userDto);
        AnsiConsole.MarkupLine("[bold green]Użytkownik został pomyślnie dodany![/]");
    }

    static async Task EditUser(ApplicationContext context)
    {
        var userController = new UserController(context);
        var users = await userController.GetUserAsync();

        if (users == null || users.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]Brak dostępnych użytkowników do edycji.[/]");
            return;
        }

        // Wyświetlenie tabeli z użytkownikami
        var userTable = new Table().Border(TableBorder.Rounded);
        userTable.AddColumn("[u]ID[/]");
        userTable.AddColumn("[u]Imię[/]");
        userTable.AddColumn("[u]Nazwisko[/]");
        userTable.AddColumn("[u]Email[/]");

        foreach (var user in users)
        {
            userTable.AddRow(user.Id.ToString(), user.Name, user.LastName, user.Email);
        }

        AnsiConsole.Write(userTable);

        // Wybór użytkownika do edycji
        var userId = AnsiConsole.Prompt(
            new SelectionPrompt<Guid>()
                .Title("[green]Wybierz ID użytkownika do edycji:[/]")
                .AddChoices(users.Select(u => u.Id))
        );

        // Pobranie nowych danych
        string name = AnsiConsole.Ask<string>("[green]Podaj nowe imię:[/]");
        string lastName = AnsiConsole.Ask<string>("[green]Podaj nowe nazwisko:[/]");
        string email = AnsiConsole.Ask<string>("[green]Podaj nowy email:[/]");
        string password = AnsiConsole.Prompt(
            new TextPrompt<string>("[green]Podaj nowe hasło:[/]")
                .PromptStyle("red")
                .Secret()
        );

        var userDto = new userDto { Id = userId, Name = name, LastName = lastName, Email = email, Password = password };
        await userController.UpdateUserAsync(userDto);
        AnsiConsole.MarkupLine("[bold green]Dane użytkownika zostały pomyślnie zaktualizowane![/]");
    }

    static async Task DeleteUser(ApplicationContext context)
    {
        var userController = new UserController(context);
        var users = await userController.GetUserAsync();

        if (users == null || users.Count == 0)
        {
            AnsiConsole.MarkupLine("[red]Brak dostępnych użytkowników do usunięcia.[/]");
            return;
        }

        // Wyświetlenie tabeli z użytkownikami
        var userTable = new Table().Border(TableBorder.Rounded);
        userTable.AddColumn("[u]ID[/]");
        userTable.AddColumn("[u]Imię[/]");
        userTable.AddColumn("[u]Nazwisko[/]");
        userTable.AddColumn("[u]Email[/]");

        foreach (var user in users)
        {
            userTable.AddRow(user.Id.ToString(), user.Name, user.LastName, user.Email);
        }

        AnsiConsole.Write(userTable);

        // Wybór użytkownika do usunięcia
        var userId = AnsiConsole.Prompt(
            new SelectionPrompt<Guid>()
                .Title("[green]Wybierz ID użytkownika do usunięcia:[/]")
                .AddChoices(users.Select(u => u.Id))
        );

        await userController.DeleteUserByIdAsync(userId);
        AnsiConsole.MarkupLine("[bold red]Użytkownik został pomyślnie usunięty![/]");
    }

}
